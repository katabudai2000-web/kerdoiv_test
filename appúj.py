# app.py ‚Äî Teljes k√©rd≈ë√≠v k√©szre dr√≥tozva
# - k√©pek az app.py-val egy mapp√°ban (praga.png, barcelona.png, roma.png)
# - minden sk√°la 1‚Äì10 r√°di√≥s Likert (nincs cs√∫szka)
# - vissza/el≈ëre gombok, halad√°sjelz≈ë, CSV-ment√©s
# - nincsenek duplik√°lt key-ek

import streamlit as st
import pandas as pd
import json, time, uuid, random
from datetime import datetime
from pathlib import Path

import smtplib
from email.mime.text import MIMEText
import streamlit as st

def send_email_notification(record: dict):
    try:
        sender = st.secrets["email"]["address"]
        password = st.secrets["email"]["password"]
        receiver = st.secrets["email"]["address"]

        subject = "√öj k√©rd≈ë√≠v kit√∂lt√©s √©rkezett"
        body = f"Egy √∫j v√°lasz √©rkezett:\n\n{record}"

        msg = MIMEText(body)
        msg["Subject"] = subject
        msg["From"] = sender
        msg["To"] = receiver

        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender, password)
            server.send_message(msg)
    except Exception as e:
        # Hib√°t is jelez a fel√ºleten, de ne dobja el a ment√©st
        st.error(f"Email k√ºld√©si hiba: {e}")
 
# ---------- ALAP ----------
st.set_page_config(page_title="üß≠ MI-aj√°nl√°sok a fogyaszt√≥i d√∂nt√©sekben", page_icon="üìù", layout="centered")
DATA_PATH = Path("responses.xlsx")

def save_row(row: dict):
    """Append: egy sor ment√©se Excel (XLSX) f√°jlba, lapos t√°bl√°zatk√©nt."""
    flat = {}
    for k, v in row.items():
        if isinstance(v, dict):
            for subk, subv in v.items():
                flat[f"{k}_{subk}"] = subv
        elif isinstance(v, list):
            flat[k] = json.dumps(v, ensure_ascii=False)
        else:
            flat[k] = v

    df_new = pd.DataFrame([flat])

    if DATA_PATH.exists():
        df_old = pd.read_excel(DATA_PATH, engine="openpyxl")
        df_all = pd.concat([df_old, df_new], ignore_index=True)
    else:
        # ha m√©g nincs f√°jl, akkor a df_all = df_new legyen
        df_all = df_new

    # fontos oszlopok sorrendje
    id_cols = ["rid", "entered_at", "submitted_at", "group"]
    time_cols = [f"duration_page_{i}" for i in range(1, 20)]
    other_cols = [c for c in df_all.columns if c not in id_cols + time_cols]

    # ha hi√°nyzik valamelyik id≈ëoszlop, hozzuk l√©tre
    for col in time_cols:
        if col not in df_all.columns:
            df_all[col] = None

    # √∫j sorrend
    df_all = df_all[id_cols + time_cols + other_cols]

    df_all.to_excel(DATA_PATH, index=False, engine="openpyxl")

  


def progress_bar(current_page, total_pages):
    st.progress(current_page / total_pages)

def calc_durations(timestamps: dict, total_pages: int):
    durations = {}
    for page_num in range(total_pages + 1):  # 0..TOTAL_PAGES
        key_entered = f"page_{page_num}_entered"
        key_left = f"page_{page_num}_left"
        if key_entered in timestamps and key_left in timestamps:
            entered = datetime.fromisoformat(timestamps[key_entered])
            left = datetime.fromisoformat(timestamps[key_left])
            durations[page_num] = (left - entered).total_seconds()
        else:
            durations[page_num] = 0
    return durations



# ---------- SESSION ----------
if "rid" not in st.session_state:
    st.session_state.rid = str(uuid.uuid4())
if "page" not in st.session_state:
    st.session_state.page = 0
if "entered_at" not in st.session_state:
    st.session_state.entered_at = datetime.utcnow().isoformat()
if "group" not in st.session_state:
    st.session_state.group = random.choice(["text", "visual"])
if "answers" not in st.session_state:
    st.session_state.answers = {}
if "timestamps" not in st.session_state:   # ‚¨ÖÔ∏è EZ AZ √öJ R√âSZ
    st.session_state.timestamps = {}
page = st.session_state.page


# ---------- DEFAULT V√ÅLTOZ√ìK ----------
if "factors" not in st.session_state:
    st.session_state.factors = {}

if "experience" not in st.session_state:
    st.session_state.experience = {}

if "ai_influence" not in st.session_state:
    st.session_state.ai_influence = None


# minden oldal bet√∂lt√©sekor logoljuk a bel√©p√©st
st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

# ---------- NAV FUNKCI√ì (fel√ºl√≠r√°s) ----------




TOTAL_PAGES = 19  # 0..18

# ---------- ANYAGOK (aj√°nlatok + sk√°l√°k) ----------
TEXT_OFFERS = {
    "Pr√°ga":"""Egy 4 napos pr√°gai utaz√°st aj√°nlok √ñnnek, amely 3 √©jszaka sz√°ll√°st tartalmaz egy belv√°rosi hotelben, reggelivel.  
Az √∫t sor√°n idegenvezet≈ë k√≠s√©ret√©ben fedezheti fel a K√°roly hidat, az √ìv√°ros teret √©s a pr√°gai v√°r t√∂rt√©nelmi utc√°it.  
**Az aj√°nlat √°ra: 129 900 Ft/f≈ë.**""",
    "Barcelona":"""Aj√°nlok √ñnnek egy 4 napos barcelonai v√°rosl√°togat√°st, amely 3 √©jszak√°s sz√°ll√°st biztos√≠t egy tengerpart k√∂zeli, 4 csillagos hotelben, reggelivel.  
Az utaz√°s sor√°n megcsod√°lhatja Gaud√≠ ikonikus alkot√°sait, k√∂zt√ºk a Sagrada Fam√≠li√°t √©s a G√ºell parkot, valamint √°t√©lheti a mediterr√°n v√°ros vibr√°l√≥ hangulat√°t.  
**Az aj√°nlat √°ra: 159 900 Ft/f≈ë.**""",
    "R√≥ma":"""Sz√≠vesen aj√°nlok √ñnnek egy 4 napos r√≥mai kir√°ndul√°st, amely 3 √©jszak√°s sz√°ll√°st tartalmaz egy k√∂zponti elhelyezked√©s≈± hotelben, reggelivel.  
Az aj√°nlat r√©sze a bel√©p≈ë a Colosseumba √©s a Vatik√°ni M√∫zeumokba, √≠gy k√∂zvetlen k√∂zelr≈ël √©lheti √°t az √∂r√∂k v√°ros kultur√°lis kincseit.  
**Az aj√°nlat √°ra: 134 900 Ft/f≈ë.**""",
}

IMAGES = {
    # a k√©pek az app.py-val EGY mapp√°ban legyenek (√©kezet N√âLK√úL!)
    "Pr√°ga": "praga.png",
    "Barcelona": "barcelona.png",
    "R√≥ma": "roma.png",
}

CAPTIONS = {
    "Pr√°ga": "Pr√°ga ‚Äì 129 900 Ft/f≈ë ¬∑ 4 nap ¬∑ Kultur√°lis √©lm√©ny",
    "Barcelona": "Barcelona ‚Äì 159 900 Ft/f≈ë ¬∑ 4 nap ¬∑ Mediterr√°n √©lm√©ny",
    "R√≥ma": "R√≥ma ‚Äì 134 900 Ft/f≈ë ¬∑ 4 nap ¬∑ T√∂rt√©nelmi √©lm√©ny",
}

DECISION_FACTORS = [
    "Az aj√°nlat √°ra",
    "A v√°ros ir√°nti k√≠v√°ncsis√°gom",
    "Kor√°bbi pozit√≠v √©lm√©nyeim a helysz√≠nnel",
    "Ismer≈ëseim v√©lem√©nye",
    "Az aj√°nlat sz√∂veg√©nek st√≠lusa",
    "A k√©p vizu√°lis min≈ës√©ge",
    "Az aj√°nlat platformja (ahol megjelent)",
    "Az, hogy mesters√©ges intelligencia gener√°lta-e",
    "T√°vols√°g / utaz√°s k√©nyelme",
    "Biztons√°gi szempontok",
    "Id≈ëj√°r√°s / √©vszak",
    "Saj√°t p√©nz√ºgyi helyzetem",
    "Egy√©b szem√©lyes szempont",
]

EXPERIENCE_ITEMS = [
    "Mennyire √©rezte hitelesnek az aj√°nlatokat?",
    "Mennyire volt k√∂nny≈± meg√©rteni a sz√∂vegeket/k√©peket?",
    "Mennyire t≈±ntek megb√≠zhat√≥nak az aj√°nlatok?",
    "Mennyire volt kellemes az √©lm√©ny?",
    "Mennyire √©rezte szem√©lyre szabottnak az aj√°nlatokat?",
    "Mennyire √©rezte, hogy a mesters√©ges intelligencia j√≥l tudja, mi √©rdekli?",
]

AI_TRUST = [
    "√Åltal√°ban b√≠zom az MI √°ltal gener√°lt tartalmakban.",
    "Az MI aj√°nl√°sai hasznosak sz√°momra.",
    "Az MI gyakran f√©lrevezet≈ë inform√°ci√≥t ad. (ford√≠tott t√©tel)",
    "Sz√≠vesen hozok d√∂nt√©st MI-aj√°nl√°sok alapj√°n.",
]

PERSUASION_KNOWLEDGE = [
    "K√∂nnyen felismerem, ha egy aj√°nlat marketing c√©lb√≥l k√©sz√ºlt.",
    "Gyorsan √©szreveszem, ha valami t√∫l sz√©p ahhoz, hogy igaz legyen.",
    "√Åltal√°ban √°tl√°tok a rekl√°mokon.",
]

MANIP_CHECK = [
    "Az √©rt√©kel√©skor figyelmen k√≠v√ºl hagytam az √°rat.",
    "Meg√©rtettem, hogy a tartalmakat MI gener√°lta / √°ll√≠thatta el≈ë.",
]

DEMOGRAPHICS = {
    "Nem": ["N≈ë", "F√©rfi", "Egy√©b", "Nem szeretn√©k v√°laszolni"],
    "√âletkor": ["18-24", "25-34", "35-44", "45-54", "55+"],
    "Legmagasabb iskolai v√©gzetts√©g": [
        "K√∂z√©piskola",
        "F≈ëiskola / Egyetem (BA/BSc)",
        "Mesterk√©pz√©s (MA/MSc)",
        "PhD / DLA",
    ],
}



def nav(prev=None, next=None, submit=False, require_key=None):
    def _get_val(rk):
        # 1. top-level session_state
        if rk in st.session_state:
            return st.session_state[rk]
        # 2. answers dict
        if "answers" in st.session_state and rk in st.session_state["answers"]:
            return st.session_state["answers"][rk]
        return None

    c1, c2 = st.columns([1,1])

    with c1:
        if prev is not None and st.button("‚Üê Vissza", key=f"prev_{st.session_state.page}_to_{prev}"):
            # ‚¨ÖÔ∏è oldal elhagy√°sa
            st.session_state.timestamps[f"page_{st.session_state.page}_left"] = datetime.utcnow().isoformat()
            st.session_state.page = prev
            st.session_state.timestamps[f"page_{st.session_state.page}_entered"] = datetime.utcnow().isoformat()
            st.rerun()

    with c2:
        if submit:
            if st.button("Bek√ºld√©s ‚úÖ", key=f"submit_{st.session_state.page}"):
                return "submit"
        elif next is not None:
            if st.button("Tov√°bb ‚Üí", key=f"next_{st.session_state.page}_to_{next}"):
                if require_key:
                    keys = require_key if isinstance(require_key, (list, tuple)) else [require_key]
                    for rk in keys:
                        val = _get_val(rk)
                        if val is None:
                            st.error("‚ö†Ô∏è K√©rj√ºk, t√∂lts√∂n ki minden mez≈ët, miel≈ëtt tov√°bbl√©pne!")
                            st.stop()
                        if isinstance(val, dict) and any(v is None for v in val.values()):
                            st.error("‚ö†Ô∏è K√©rj√ºk, t√∂lts√∂n ki minden mez≈ët, miel≈ëtt tov√°bbl√©pne!")
                            st.stop()

                # ‚¨ÖÔ∏è oldal elhagy√°sa
                st.session_state.timestamps[f"page_{st.session_state.page}_left"] = datetime.utcnow().isoformat()
                st.session_state.page = next
                st.session_state.timestamps[f"page_{st.session_state.page}_entered"] = datetime.utcnow().isoformat()
                st.rerun()
    return None


def calc_durations(timestamps: dict):
    durations = {}
    for key, value in timestamps.items():
        if key.endswith("_entered"):
            page_tag = key.replace("_entered", "")
            entered = datetime.fromisoformat(value)
            left_key = f"{page_tag}_left"
            if left_key in timestamps:
                left = datetime.fromisoformat(timestamps[left_key])
                page_num = int(page_tag.split("_")[-1])
                durations[page_num] = (left - entered).total_seconds()
            else:
                durations[int(page_tag.split("_")[-1])] = 0
    return durations





# oldal bel√©p√©s ideje logolva
if f"page_{page}_entered" not in st.session_state.timestamps:
    st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()



# oldal bel√©p√©s ideje logolva
st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()



# 0. oldal ‚Äì Bevezet≈ë + Beleegyez√©s + Instrukci√≥k
if page == 0:
    st.title("üß≠ MI-aj√°nl√°sok a fogyaszt√≥i d√∂nt√©sekben")

    st.markdown("""
    Kedves Kit√∂lt≈ë!

    Budai Katalin vagyok, a Budapesti Gazdas√°gtudom√°nyi Egyetem p√©nz√ºgy-sz√°mvitel alapszakos hallgat√≥ja. 
    Ez a k√©rd≈ë√≠v a Tudom√°nyos Di√°kk√∂ri Konferenci√°ra k√©sz√ºl≈ë kutat√°som r√©sze, amelyben azt vizsg√°lom, 
    hogyan befoly√°solhatja a mesters√©ges intelligencia a fogyaszt√≥i d√∂nt√©shozatalt. 

    A kit√∂lt√©s k√∂r√ºlbel√ºl 8-10 percet vesz ig√©nybe, √©s nagy seg√≠ts√©get jelent sz√°momra. 
    M√©g nagyobb t√°mogat√°s, ha a k√©rd≈ë√≠vet m√°soknak is tov√°bb√≠tja, mert min√©l t√∂bb v√°laszra van sz√ºks√©gem 
    a kutat√°s sikeres megval√≥s√≠t√°s√°hoz.

    El≈ëre is k√∂sz√∂n√∂m a seg√≠ts√©g√©t √©s k√∂zrem≈±k√∂d√©s√©t!
    """)

    progress_bar(0, TOTAL_PAGES)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.markdown("**Beleegyez√©s**")
    consent = st.radio(
        "Hozz√°j√°rulok a n√©vtelen v√°laszaim kutat√°si c√©l√∫ felhaszn√°l√°s√°hoz.",
        ["Igen", "Nem"], index=None, key="consent_0")
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
  

    if st.button("Kezd√©s ‚Üí"):
        if consent != "Igen":
            st.error("A k√©rd≈ë√≠v folytat√°s√°hoz sz√ºks√©g van a hozz√°j√°rul√°sra.")
        else:
            st.session_state.timestamps[f"page_{st.session_state.page}_left"] = datetime.utcnow().isoformat()
            st.session_state.page = 1
            st.session_state.timestamps[f"page_{st.session_state.page}_entered"] = datetime.utcnow().isoformat()
            st.rerun()


# ===== Aj√°nlat oldalak (1-3) =====
elif page == 1:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.now()

    st.markdown("**Instrukci√≥k**")
    st.write("A k√∂vetkez≈ë oldalakon MI √°ltal javasolt utaz√°si aj√°nlatokat l√°t. "
             "K√©rj√ºk, olvassa el / n√©zze meg, majd v√°laszoljon a k√©rd√©sekre.")
    st.write("‚ö†Ô∏è A d√∂nt√©se sor√°n **ne vegye figyelembe az √°rat** ‚Äì ezt k√ºl√∂n is ellen≈ërizz√ºk.")

    if st.button("Tov√°bb ‚Üí"):
        st.session_state.page = 2
        st.rerun()

elif page == 2:
    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Aj√°nlat 1/3")
    st.subheader("Pr√°ga ‚Äì Kultur√°lis √©lm√©ny")

    if st.session_state.group == "text":
        st.markdown(TEXT_OFFERS["Pr√°ga"])
    else:
        st.image(IMAGES["Pr√°ga"], caption=CAPTIONS["Pr√°ga"])

    nav(prev=1, next=3)


elif page == 3:
    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Aj√°nlat 2/3")
    st.subheader("Barcelona ‚Äì Mediterr√°n √©lm√©ny")

    if st.session_state.group == "text":
        st.markdown(TEXT_OFFERS["Barcelona"])
    else:
        st.image(IMAGES["Barcelona"], caption=CAPTIONS["Barcelona"], use_container_width=True)

    nav(prev=2, next=4)


elif page == 4:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Aj√°nlat 3/3")
    st.subheader("R√≥ma ‚Äì T√∂rt√©nelmi √©lm√©ny")

    if st.session_state.group == "text":
        st.markdown(TEXT_OFFERS["R√≥ma"])
    else:
        st.image(IMAGES["R√≥ma"], caption=CAPTIONS["R√≥ma"], use_container_width=True)

    nav(prev=3, next=5)


# ===== 5. oldal: D√∂nt√©s =====
elif page == 5:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("2. D√∂nt√©s")

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    decision_choice = st.radio(
        "Melyik aj√°nlatot fogadn√° el?",
        ["Pr√°ga", "Barcelona", "R√≥ma", "Egyiket sem"],
        index=None,
        key="decision_choice"
    )
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    decision_count = st.radio(
        "√ñsszesen h√°ny aj√°nlatot tartott elfogadhat√≥nak?",
        [0, 1, 2, 3],
        index=None,
        key="decision_count"
    )
    st.markdown('</div>', unsafe_allow_html=True)

    action = nav(prev=4, next=6, require_key=["decision_choice", "decision_count"])

    
    if action:
        errs = []
        if decision_choice is None:
            errs.append("V√°lassza ki, melyik aj√°nlatot fogadn√° el.")
        if decision_count is None:
            errs.append("Adja meg, h√°ny aj√°nlatot tartott elfogadhat√≥nak.")
        if decision_choice not in (None, "Egyiket sem") and decision_count == 0:
            errs.append("A v√°lasztott aj√°nlatnak szerepelnie kell az elfogadhat√≥k k√∂z√∂tt.")
        if decision_choice == "Egyiket sem" and decision_count != 0:
            errs.append("Ha ‚ÄûEgyiket sem‚Äù-et v√°laszt, az elfogadhat√≥k sz√°ma 0 kell legyen.")

        if len(errs) > 0:
            st.error(" ‚Ä¢ ".join(errs))
        else:
            st.session_state.answers["decision_choice"] = decision_choice
            st.session_state.answers["decision_count"] = decision_count
            st.session_state.page += 1
            st.rerun()

# ===== 6. oldal: Befoly√°sol√≥ t√©nyez≈ëk =====
elif page == 6:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Mi befoly√°solta a d√∂nt√©s√©t?")
    st.write("Az al√°bbi k√©rd√©sek arra vonatkoznak, hogyan √©lte meg a d√∂nt√©s meghozatal√°t, "
             "√©s hogyan viszonyul az ut√≥lagos k√∂vetkezm√©nyekhez. "
             "K√©rj√ºk, √©rt√©kelje az √°ll√≠t√°sokat az adott sk√°l√°n!")

    st.caption("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat egy 1-t≈ël 10-ig terjed≈ë sk√°l√°n, "
               "ahol az 1 = egy√°ltal√°n nem √©rtek egyet, a 10 = teljes m√©rt√©kben egyet√©rtek.")

    factors_ans = {}
    for i, q in enumerate(DECISION_FACTORS):
     factors_ans[q] = st.slider(
        q,
        min_value=1,
        max_value=10,
        value=5,   # alap√©rt√©k, mindig van (itt nincs None lehet≈ës√©g)
        step=1,
        key=f"factor_{i}"
        
        )

    st.session_state.answers["factors"] = factors_ans
      
    nav(prev=5, next=7, require_key="factors")


# ===== 7. oldal: D√∂nt√©si √©lm√©ny =====
elif page == 7:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("D√∂nt√©si √©lm√©ny")
    st.caption("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat egy 1-t≈ël 10-ig terjed≈ë sk√°l√°n, "
               "ahol az 1 = egy√°ltal√°n nem √©rtek egyet, a 10 = teljes m√©rt√©kben egyet√©rtek.")

    experience_qs = [
        "Biztos voltam abban, hogy j√≥ d√∂nt√©st hoztam.",
        "Megk√∂nnyebb√ºl√©st √©reztem a v√°laszt√°s ut√°n.",
        "Nyugodtnak √©reztem magam a d√∂nt√©s k√∂zben.",
        "√ögy √©reztem, hogy a d√∂nt√©s az √©n kezemben van."
    ]

    exp_ans = {}
    for i, q in enumerate(experience_qs):
        exp_ans[q] = st.radio(
            q,
            list(range(1, 11)),
            horizontal=True,
            key=f"exp_{i}",
            index=None
        )
    st.session_state.answers["exp_ans.items"] = exp_ans

   # --- √âRV√âNYESS√âG ELLEN≈êRZ√âS + NAV ---
    all_valid = True
    for q, val in exp_ans.items():
        if val is None:
            all_valid = False

    nav(prev=6, next=8, require_key="experience")



# 8. oldal ‚Äì 4.1 √âlm√©nyk√©rd√©sek
elif page == 8:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("√âlm√©nyre vonatkoz√≥ k√©rd√©sek")
    st.write("Az al√°bbi k√©rd√©sek arra vonatkoznak, milyen √©lm√©ny volt a d√∂nt√©si folyamat sz√°m√°ra. ")
    st.caption("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat egy 1-t≈ël 10-ig terjed≈ë sk√°l√°n, ahol az 1 = egy√°ltal√°n nem √©rtek egyet, a 10 = teljes m√©rt√©kben egyet√©rtek.")

    # ‚¨ÖÔ∏è EZ HI√ÅNYZOTT
    confirmation_qs = [
        "A d√∂nt√©s ut√°n is gondolkodtam, vajon helyesen v√°lasztottam-e.",
        "Szerettem volna, ha valaki meger≈ës√≠ti, hogy j√≥l d√∂nt√∂ttem.",
        "√ögy √©reztem, sz√≠vesen megosztan√°m m√°sokkal a v√°laszt√°somat.",
    ]

    confirmation_ans = {}
    for i, q in enumerate(confirmation_qs):
        confirmation_ans[q] = st.radio(
            q,
            list(range(1, 11)),
            horizontal=True,
            index=None,
            key=f"conf7_{i}"   # ‚Üê egyedi kulcs (ne √ºtk√∂zz√∂n a 8. oldallal!)
        )

    st.session_state.answers["confirmation"] = confirmation_ans

    # --- √âRV√âNYESS√âG ELLEN≈êRZ√âS + NAV ---
    all_valid = True
    for q, val in confirmation_ans.items():
        if val is None:
            all_valid = False

    nav(prev=7, next=9, require_key="confirmation")






elif page == 9:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Meger≈ës√≠t√©skeres√©s")
    st.write("Az al√°bbi k√©rd√©sek arra vonatkoznak, mennyire ig√©nyel meger≈ës√≠t√©st a d√∂nt√©sei ut√°n. ")
    st.caption("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat egy 1-t≈ël 10-ig terjed≈ë sk√°l√°n, ahol az 1 = egy√°ltal√°n nem √©rtek egyet, a 10 = teljes m√©rt√©kben egyet√©rtek.")

    confirmation_qs = [
        "V√°s√°rl√°s ut√°n k√©rem m√°sok v√©lem√©ny√©t, hogy j√≥l d√∂nt√∂ttem-e.",
        "Fontos sz√°momra, hogy a k√∂rnyezetem j√≥v√°hagyja a v√°s√°rl√°si d√∂nt√©seimet.",
        "Bizonytalan helyzetben ink√°bb megv√°rom, mit mondanak m√°sok a term√©kr≈ël.",
        "Gyakran hasonl√≠tom √∂ssze a v√°laszt√°somat az ismer≈ëseim d√∂nt√©seivel.",
    ]

    confirmation_ans = {}
    for i, q in enumerate(confirmation_qs):
        confirmation_ans[q] = st.radio(
            q,
            list(range(1, 11)),
            horizontal=True,
            index=None,
            key=f"conf8_{i}"   # ‚Üê egyedi kulcs (ne √ºtk√∂zz√∂n a 7. oldallal!)
        )

    st.session_state.answers["confirmation_page8"] = confirmation_ans

   # --- √âRV√âNYESS√âG ELLEN≈êRZ√âS + NAV ---
    all_valid = True
    for q, val in confirmation_ans.items():
        if val is None:
            all_valid = False

    nav(prev=8, next=10, require_key="confirmation_page8")




# 9. oldal ‚Äì 4.2 Felel≈ëss√©g√©rzet
elif page == 10:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Felel≈ëss√©g√©rzet")
    st.write("Az al√°bbi k√©rd√©sek arra vonatkoznak, mennyire √©rzi mag√°t felel≈ës√©nek a d√∂nt√©sei ut√°n. ")
    st.caption("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat egy 1-t≈ël 10-ig terjed≈ë sk√°l√°n, ahol az 1 = egy√°ltal√°n nem √©rtek egyet, a 10 = teljes m√©rt√©kben egyet√©rtek.")

    confirmation_qs = [
        "Ha egy term√©k nem v√°lik be, magamat hib√°ztatom a rossz d√∂nt√©s√©rt.",
        "V√°s√°rl√°skor gyakran ink√°bb m√°sok vagy egy rendszer javaslataira t√°maszkodom, nem a saj√°t meg√©rz√©semre. (ford√≠tott t√©tel)",
        "Az el√©gedetts√©gem vagy csal√≥d√°som a v√°s√°rl√°saimn√°l az √©n d√∂nt√©sem k√∂vetkezm√©nye.",
        
    ]

    confirmation_ans = {}
    for i, q in enumerate(confirmation_qs):
        confirmation_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"conf_{i}", index=None)
    st.session_state.answers["confirmation"] = confirmation_ans

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

# minden r√°di√≥ ki van t√∂ltve?
    for q, val in st.session_state.get("confirmation", {}).items():
     if val is None:
        all_valid = False

    nav(prev=9, next=11, require_key="confirmation")

    

# 10. oldal ‚Äì 4.3 Hogyan hatott √ñnre az MI-aj√°nl√°s?
if page == 11:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Hogyan hatott √ñnre az MI-aj√°nl√°s a d√∂nt√©se sor√°n?")

    ai_influence = st.radio(
        "K√©rj√ºk, v√°lassza ki az √ñnre legink√°bb jellemz≈ë √°ll√≠t√°st:",
        [
            "Egy√°ltal√°n nem vettem figyelembe az aj√°nl√°st",
            "Az aj√°nl√°s egybeesett azzal, amit magamt√≥l is v√°lasztottam volna",
            "Az aj√°nl√°s √∫j szempontot adott, amit figyelembe vettem",
            "Az aj√°nl√°s teljesen megv√°ltoztatta a d√∂nt√©semet"
        ],
        index=None,
        key="ai_influence"
    )

    st.session_state.answers["ai_influence"] = ai_influence

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

    if st.session_state.get("ai_influence") is None:  # nincs v√°laszt√°s
      all_valid = False

    nav(prev=10, next=12, require_key="ai_influence")





# 11. Manipul√°ci√≥-ellen≈ërz√©s + figyelmi pr√≥ba
elif page == 12:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Ellen≈ërz≈ë k√©rd√©sek")
    st.caption("Az al√°bbi k√©rd√©sek arra szolg√°lnak, hogy ellen≈ërizz√ºk a figyelmet √©s a v√°laszok k√∂vetkezetess√©g√©t.")


    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.subheader("Manipul√°ci√≥-ellen≈ërz√©s")
    mc = {}
    for i, q in enumerate(MANIP_CHECK):
        mc[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"mc_{i}")
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.subheader("Figyelmi pr√≥ba")
    attn = st.radio("V√°lassza a **harmadik** opci√≥t!", ["Els≈ë", "M√°sodik", "Harmadik", "Negyedik"],
                    index=None, key="attention_check")
    st.markdown('</div>', unsafe_allow_html=True)

    st.session_state.answers["manip_check"] = mc
    st.session_state.answers["attention"] = attn

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

    if st.session_state.get("attention") is None:
        all_valid = False

    nav(prev=11, next=13, require_key="attention")





# 12. oldal ‚Äì 4.4 Alternat√≠v√°k m√©rlegel√©se
elif page == 13:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Alternat√≠v√°k m√©rlegel√©se")
    st.write("Az al√°bbi k√©rd√©sek arra vonatkoznak, mennyire m√©rlegeli a k√ºl√∂nb√∂z≈ë lehet≈ës√©geket d√∂nt√©s el≈ëtt.")
    st.caption("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat egy 1-t≈ël 10-ig terjed≈ë sk√°l√°n, ahol az 1 = egy√°ltal√°n nem √©rtek egyet, a 10 = teljes m√©rt√©kben egyet√©rtek.")

    maximization_qs = [
        "V√°s√°rl√°s el≈ëtt t√∂bb k√ºl√∂nb√∂z≈ë term√©ket is √∂ssze szoktam hasonl√≠tani.",
        "Fontos sz√°momra, hogy minden lehets√©ges alternat√≠v√°t megvizsg√°ljak.",
        "Sok id≈ët t√∂lt√∂k azzal, hogy m√°s opci√≥kat is m√©rlegeljek.",
        "Gyakran √°tn√©zek t√∂bb weboldalt vagy boltot, miel≈ëtt d√∂nt√∂k.",
        "√Åltal√°ban nem el√©gszem meg az els≈ë javasolt lehet≈ës√©ggel. (ford√≠tott t√©tel)"
    ]

    maximization_ans = {}
    for i, q in enumerate(maximization_qs):
        maximization_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"max_{i}", index=None)
    st.session_state.answers["maximization"] = maximization_ans

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True


    for q, val in st.session_state.get("maximization", {}).items() : 
     if val is None:
           all_valid = False

    nav(prev=12, next=14, require_key="maximization")

   


# 13. oldal ‚Äì 4.5 Nyitott k√©rd√©s
elif page == 14:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Nyitott k√©rd√©s")
    st.write("K√©rem, √≠rja le r√∂viden, mi volt az a legfontosabb szempont, ami alapj√°n v√©g√ºl az adott aj√°nlatot v√°lasztotta.")

    # üîπ ez a mez≈ë mindig megjelenik
    choice_reason = st.text_area("V√°lasza:", key="choice_reason")

    # üîπ ment√©s az answers-be
    st.session_state.answers["choice_reason"] = choice_reason

    
    
  # --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

    if st.session_state.get("choice_reason") is None:
        all_valid = False

    nav(prev=13, next=15, require_key="choice_reason")


# 14. oldal ‚Äì 5. V√°s√°rl√°si gyakoris√°g
elif page == 15:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("V√°s√°rl√°si gyakoris√°g")
    st.caption("K√©rem, jel√∂lje, milyen gyakran v√°s√°rol az al√°bbi m√≥dokon.")

    freq_opts = ["Soha", "Ritk√°n (√©vente 1‚Äì2 alkalom)", "Havonta", "Hetente", "Hetente t√∂bbsz√∂r"]

    freq = {}
    freq["Milyen gyakran v√°s√°rol online (pl. webshopban, alkalmaz√°son kereszt√ºl)?"] = st.radio(
        "Milyen gyakran v√°s√°rol online (pl. webshopban, alkalmaz√°son kereszt√ºl)?",
        freq_opts, index=None, key="freq_online"
    )
    freq["Milyen gyakran v√°s√°rol szem√©lyesen (pl. boltban, √ºzletben)?"] = st.radio(
        "Milyen gyakran v√°s√°rol szem√©lyesen (pl. boltban, √ºzletben)?",
        freq_opts, index=None, key="freq_offline"
    )
    freq["Milyen gyakran haszn√°l mesters√©ges intelligencia eszk√∂zt (pl. chatbotot, aj√°nl√≥rendszert) v√°s√°rl√°sai sor√°n?"] = st.radio(
        "Milyen gyakran haszn√°l mesters√©ges intelligencia eszk√∂zt (pl. chatbotot, aj√°nl√≥rendszert) v√°s√°rl√°sai sor√°n?",
        freq_opts, index=None, key="freq_ai"
    )

    st.session_state.answers["frequency"] = freq

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

    for q, val in st.session_state.get("frequency", {}).items():
    
        all_valid = False

    nav(prev=14, next=16, require_key="frequency")

   


# 15. oldal ‚Äì AIAS-4 sk√°la
elif page == 16:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("AIAS-4 sk√°la")
    st.write("Az al√°bbi k√©rd√©sek azt vizsg√°lj√°k, hogyan l√°tja a mesters√©ges intelligencia j√∂v≈ëbeli hat√°sait.")
    st.caption("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat egy 1-t≈ël 10-ig terjed≈ë sk√°l√°n, ahol az 1 = egy√°ltal√°n nem √©rtek egyet, a 10 = teljes m√©rt√©kben egyet√©rtek")
    aias_qs = [
        "√ögy gondolom, hogy a mesters√©ges intelligencia jav√≠tani fogja az √©letemet.",
        "√ögy gondolom, hogy a mesters√©ges intelligencia jav√≠tani fogja a munk√°mat.",
        "√ögy gondolom, hogy a j√∂v≈ëben haszn√°lni fogok mesters√©ges intelligencia alap√∫ technol√≥gi√°t.",
        "√ögy gondolom, hogy a mesters√©ges intelligencia √∂sszess√©g√©ben pozit√≠v az emberis√©g sz√°m√°ra."
    ]

    aias_ans = {}
    for i, q in enumerate(aias_qs):
        aias_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"aias_{i}", index=None)

    st.session_state.answers["aias"] = aias_ans

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

    for q, val in st.session_state.get("aias", {}).items():
     
        all_valid = False

    nav(prev=15, next=17, require_key="aias")

  


# 16. oldal ‚Äì Mesters√©ges intelligencia haszn√°lata
elif page == 17:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Mesters√©ges intelligencia haszn√°lata")

    ai_use = st.radio(
        "Haszn√°lja √ñn a mindennapokban mesters√©ges intelligencia alap√∫ eszk√∂z√∂ket (pl. ChatGPT, aj√°nl√≥rendszerek, chatbotok)?",
        ["Igen", "Nem"],
        index=None,
        key="ai_use"
    )

    ai_freq = st.radio(
        "Milyen gyakran haszn√°l mesters√©ges intelligenci√°t?",
        ["Soha", "Ritk√°n", "Havonta", "Hetente", "Hetente t√∂bbsz√∂r"],
        index=None,
        key="ai_freq"
    )

    st.session_state.answers["ai_use"] = ai_use
    st.session_state.answers["ai_freq"] = ai_freq

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

    if st.session_state.get("ai_use") is None:
       all_valid = False
       if st.session_state.get("ai_freq") is None:
        all_valid = False

    nav(prev=16, next=18, require_key="ai_use")

    




# 17. oldal ‚Äì Demogr√°fiai k√©rd√©sek
elif page == 18:
    # bel√©p√©si id≈ë r√∂gz√≠t√©se
    if f"page_{page}_entered" not in st.session_state.timestamps:
        st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

    progress_bar(page, TOTAL_PAGES)
    st.caption(f"Oldal {page+1} / {TOTAL_PAGES}")
    st.header("Demogr√°fiai k√©rd√©sek")

    demo = {}
    demo["Neme"] = st.radio(
        "K√©rj√ºk, jel√∂lje a nem√©t:",
        ["F√©rfi", "N≈ë", "Egy√©b / nem szeretn√©m megadni"],
        index=None, key="demo_gender"
    )
    demo["√âletkora"] = st.radio(
        "K√©rj√ºk, adja meg az √©letkor√°t:",
        ["18‚Äì24 √©v", "25‚Äì34 √©v", "35‚Äì44 √©v", "45‚Äì54 √©v", "55 √©v vagy id≈ësebb"],
        index=None, key="demo_age"
    )
    demo["Legmagasabb iskolai v√©gzetts√©ge"] = st.radio(
        "K√©rj√ºk, adja meg a legmagasabb iskolai v√©gzetts√©g√©t:",
        ["K√∂z√©piskola", "Fels≈ëfok√∫ tanulm√°nyok folyamatban", "Egyetemi / f≈ëiskolai diploma", "Posztgradu√°lis v√©gzetts√©g"],
        index=None, key="demo_edu"
    )
    demo["Foglalkoz√°sa / st√°tusza"] = st.radio(
        "K√©rj√ºk, jel√∂lje a foglalkoz√°s√°t / st√°tusz√°t:",
        ["Tanul√≥ / hallgat√≥", "Dolgoz√≥ alkalmazottk√©nt", "V√°llalkoz√≥", "Munkan√©lk√ºli", "Egy√©b"],
        index=None, key="demo_job"
    )
    demo["Lak√≥hely t√≠pusa"] = st.radio(
        "K√©rj√ºk, jel√∂lje a lak√≥hely√©nek t√≠pus√°t:",
        ["F≈ëv√°ros", "Megyesz√©khely", "Egy√©b v√°ros", "K√∂zs√©g"],
        index=None, key="demo_residence"
    )

    st.session_state.answers["demographics"] = demo

# --- √âRV√âNYESS√âG ELLEN≈êRZ√âS ---
    all_valid = True

    for q, val in st.session_state.get("demographics", {}).items():
     if val is None:
        all_valid = False

    nav(prev=17, next=19, require_key="demographics")
  



elif page == TOTAL_PAGES:
    st.success("K√∂sz√∂nj√ºk a kit√∂lt√©st! ‚úÖ")
    st.write("K√∂sz√∂n√∂m, hogy id≈ët sz√°nt a k√©rd≈ë√≠v kit√∂lt√©s√©re.")
    st.write("Ha teheti, k√©rem ossza meg a k√©rd≈ë√≠vet m√°sokkal is. üôè")

    record = {
        "rid": st.session_state.rid,
        "entered_at": st.session_state.entered_at,
        "submitted_at": datetime.now().astimezone().isoformat(),
        "group": st.session_state.group,
    }

    # --- v√°laszok k√ºl√∂n oszlopokra ---
    for q, ans in st.session_state.answers.items():
        if isinstance(ans, dict):
            for subq, subv in ans.items():
                record[f"{q}_{subq}"] = subv
        else:
            record[q] = ans

    # --- oldalak ideje ---
    durations = calc_durations(st.session_state.timestamps)

    record["duration_page_1"] = round(durations.get(1, 0), 2)
    record["duration_page_2"] = round(durations.get(2, 0), 2)
    record["duration_page_3"] = round(durations.get(3, 0), 2)
    record["duration_page_4"] = round(durations.get(4, 0), 2)
    record["duration_page_5"] = round(durations.get(5, 0), 2)
    record["duration_page_6"] = round(durations.get(6, 0), 2)
    record["duration_page_7"] = round(durations.get(7, 0), 2)
    record["duration_page_8"] = round(durations.get(8, 0), 2)
    record["duration_page_9"] = round(durations.get(9, 0), 2)
    record["duration_page_10"] = round(durations.get(10, 0), 2)
    record["duration_page_11"] = round(durations.get(11, 0), 2)
    record["duration_page_12"] = round(durations.get(12, 0), 2)
    record["duration_page_13"] = round(durations.get(13, 0), 2)
    record["duration_page_14"] = round(durations.get(14, 0), 2)
    record["duration_page_15"] = round(durations.get(15, 0), 2)
    record["duration_page_16"] = round(durations.get(16, 0), 2)
    record["duration_page_17"] = round(durations.get(17, 0), 2)
    record["duration_page_18"] = round(durations.get(18, 0), 2)
    record["duration_page_19"] = round(durations.get(19, 0), 2)



    # --- MINDEN oldal id≈ëm√©r√©se ---
    durations = calc_durations(st.session_state.timestamps)
    for p, secs in durations.items():
        record[f"duration_page_{p}"] = round(secs, 2)

    # --- ment√©s ---
    save_row(record)

    st.stop()





    st.markdown("""
<style>

/* Input mez≈ëk doboz n√©lk√ºl */
.stRadio > div,
.stTextInput > div,
.stTextArea > div,
.stSelectbox > div,
div[data-baseweb="input"] > div,
div[data-baseweb="textarea"] > textarea,
div[data-baseweb="select"] {
    background-color: transparent !important;
    border: none !important;
    box-shadow: none !important;
    color: #ffffff !important;
}

/* Radio c√≠mk√©k */
.stRadio label {
    color: #ffffff !important;
}

.stButton>button:hover {
    background-color: #ff2a2a !important;
}

/* --- Mobil optimaliz√°l√°s: val√≥ban ar√°nyos√≠tott sk√°la --- */
@media (max-width: 768px) {

    /* Sz√∂vegek kisebb, ar√°nyos m√©retben */
    p, .stMarkdown, .stText, .stHeader, .stSubheader {
        font-size: 14px !important;
        line-height: 1.35em !important;
    }

    /* R√°di√≥gombok egy sorban, s≈±r√≠tve */
    .stRadio > div {
        flex-wrap: nowrap !important;
        justify-content: space-evenly !important;
        align-items: center !important;
        gap: 1px !important;
    }

    /* Sz√°mok kisebbek, de olvashat√≥k */
    .stRadio label {
        font-size: 14px !important;
        padding: 1px !important;
        margin-right: 1px !important;
        transform: scale(0.9);
    }

    /* R√°di√≥k t√©nylegesen kisebb m√©retben */
    input[type="radio"] {
        width: 15px !important;
        height: 15px !important;
        transform: scale(0.85);
    }

    /* Gombok kicsit karcs√∫s√≠tva, hogy ne tolj√°k sz√©t az oldalt */
    .stButton>button {
        min-width: 48%;
        font-size: 14px !important;
        padding: 6px 0 !important;
    }

    /* Oldalmarg√≥k mobilon s≈±r√≠tve */
    .block-container {
        padding-left: 0.4rem !important;
        padding-right: 0.4rem !important;
    }
}


</style>
""", unsafe_allow_html=True)
