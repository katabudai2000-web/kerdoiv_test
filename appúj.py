# app.py ‚Äî Teljes k√©rd≈ë√≠v k√©szre dr√≥tozva
# - k√©pek az app.py-val egy mapp√°ban (praga.png, barcelona.png, roma.png)
# - minden sk√°la 1‚Äì10 r√°di√≥s Likert (nincs cs√∫szka)
# - vissza/el≈ëre gombok, halad√°sjelz≈ë, CSV-ment√©s
# - nincsenek duplik√°lt key-ek

import streamlit as st
import pandas as pd
import json, time, uuid, random
from datetime import datetime
from pathlib import Path

# ---------- ALAP ----------
st.set_page_config(page_title="üß≠ MI-aj√°nl√°sok ‚Äì k√©rd≈ë√≠v", page_icon="üìù", layout="centered")
DATA_PATH = Path("responses.csv")

def save_row(row: dict):
    """Append: egy sor ment√©se CSV-be; be√°gyazott dict/list JSON-k√©nt."""
    flat = {}
    for k, v in row.items():
        if isinstance(v, (dict, list)):
            flat[k] = json.dumps(v, ensure_ascii=False)
        else:
            flat[k] = v
    df_new = pd.DataFrame([flat])
    if DATA_PATH.exists():
        df_old = pd.read_csv(DATA_PATH)
        df_all = pd.concat([df_old, df_new], ignore_index=True)
    else:
        df_all = df_new
    df_all.to_csv(DATA_PATH, index=False, encoding="utf-8-sig")

def progress_bar(current_page, total_pages):
    st.progress(current_page / total_pages)

# ---------- SESSION ----------
if "rid" not in st.session_state:
    st.session_state.rid = str(uuid.uuid4())
if "page" not in st.session_state:
    st.session_state.page = 0
if "entered_at" not in st.session_state:
    st.session_state.entered_at = datetime.utcnow().isoformat()
if "group" not in st.session_state:
    st.session_state.group = random.choice(["text", "visual"])
if "answers" not in st.session_state:
    st.session_state.answers = {}
if "timestamps" not in st.session_state:   # ‚¨ÖÔ∏è EZ AZ √öJ R√âSZ
    st.session_state.timestamps = {}
page = st.session_state.page

# minden oldal bet√∂lt√©sekor logoljuk a bel√©p√©st
st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()

# ---------- NAV FUNKCI√ì (fel√ºl√≠r√°s) ----------




TOTAL_PAGES = 16  # 0..15

# ---------- ANYAGOK (aj√°nlatok + sk√°l√°k) ----------
TEXT_OFFERS = {
    "Pr√°ga": """**Pr√°ga ‚Äì Kultur√°lis √©lm√©ny**  
Egy 4 napos pr√°gai utaz√°st aj√°nlok √ñnnek, amely 3 √©jszaka sz√°ll√°st tartalmaz egy belv√°rosi hotelben, reggelivel.  
Az √∫t sor√°n idegenvezet≈ë k√≠s√©ret√©ben fedezheti fel a K√°roly hidat, az √ìv√°ros teret √©s a pr√°gai v√°r t√∂rt√©nelmi utc√°it.  
**Az aj√°nlat √°ra: 129 900 Ft/f≈ë.**""",
    "Barcelona": """**Barcelona ‚Äì Mediterr√°n √©lm√©ny**  
Aj√°nlok √ñnnek egy 4 napos barcelonai v√°rosl√°togat√°st, amely 3 √©jszak√°s sz√°ll√°st biztos√≠t egy tengerpart k√∂zeli, 4 csillagos hotelben, reggelivel.  
Az utaz√°s sor√°n megcsod√°lhatja Gaud√≠ ikonikus alkot√°sait, k√∂zt√ºk a Sagrada Fam√≠li√°t √©s a G√ºell parkot, valamint √°t√©lheti a mediterr√°n v√°ros vibr√°l√≥ hangulat√°t.  
**Az aj√°nlat √°ra: 159 900 Ft/f≈ë.**""",
    "R√≥ma": """**R√≥ma ‚Äì T√∂rt√©nelmi √©lm√©ny**  
Sz√≠vesen aj√°nlok √ñnnek egy 4 napos r√≥mai kir√°ndul√°st, amely 3 √©jszak√°s sz√°ll√°st tartalmaz egy k√∂zponti elhelyezked√©s≈± hotelben, reggelivel.  
Az aj√°nlat r√©sze a bel√©p≈ë a Colosseumba √©s a Vatik√°ni M√∫zeumokba, √≠gy k√∂zvetlen k√∂zelr≈ël √©lheti √°t az √∂r√∂k v√°ros kultur√°lis kincseit.  
**Az aj√°nlat √°ra: 134 900 Ft/f≈ë.**""",
}

IMAGES = {
    # a k√©pek az app.py-val EGY mapp√°ban legyenek (√©kezet N√âLK√úL!)
    "Pr√°ga": "praga.png",
    "Barcelona": "barcelona.png",
    "R√≥ma": "roma.png",
}

CAPTIONS = {
    "Pr√°ga": "Pr√°ga ‚Äì 129 900 Ft/f≈ë ¬∑ 4 nap ¬∑ Kultur√°lis √©lm√©ny",
    "Barcelona": "Barcelona ‚Äì 159 900 Ft/f≈ë ¬∑ 4 nap ¬∑ Mediterr√°n √©lm√©ny",
    "R√≥ma": "R√≥ma ‚Äì 134 900 Ft/f≈ë ¬∑ 4 nap ¬∑ T√∂rt√©nelmi √©lm√©ny",
}

DECISION_FACTORS = [
    "Az aj√°nlat √°ra",
    "A v√°ros ir√°nti k√≠v√°ncsis√°gom",
    "Kor√°bbi pozit√≠v √©lm√©nyeim a helysz√≠nnel",
    "Ismer≈ëseim v√©lem√©nye",
    "Az aj√°nlat sz√∂veg√©nek st√≠lusa",
    "A k√©p vizu√°lis min≈ës√©ge",
    "Az aj√°nlat platformja (ahol megjelent)",
    "Az, hogy mesters√©ges intelligencia gener√°lta-e",
    "T√°vols√°g / utaz√°s k√©nyelme",
    "Biztons√°gi szempontok",
    "Id≈ëj√°r√°s / √©vszak",
    "Saj√°t p√©nz√ºgyi helyzetem",
    "Egy√©b szem√©lyes szempont",
]

EXPERIENCE_ITEMS = [
    "Mennyire √©rezte hitelesnek az aj√°nlatokat?",
    "Mennyire volt k√∂nny≈± meg√©rteni a sz√∂vegeket/k√©peket?",
    "Mennyire t≈±ntek megb√≠zhat√≥nak az aj√°nlatok?",
    "Mennyire volt kellemes az √©lm√©ny?",
    "Mennyire √©rezte szem√©lyre szabottnak az aj√°nlatokat?",
    "Mennyire √©rezte, hogy a mesters√©ges intelligencia j√≥l tudja, mi √©rdekli?",
]

AI_TRUST = [
    "√Åltal√°ban b√≠zom az MI √°ltal gener√°lt tartalmakban.",
    "Az MI aj√°nl√°sai hasznosak sz√°momra.",
    "Az MI gyakran f√©lrevezet≈ë inform√°ci√≥t ad. (ford√≠tott t√©tel)",
    "Sz√≠vesen hozok d√∂nt√©st MI-aj√°nl√°sok alapj√°n.",
]

PERSUASION_KNOWLEDGE = [
    "K√∂nnyen felismerem, ha egy aj√°nlat marketing c√©lb√≥l k√©sz√ºlt.",
    "Gyorsan √©szreveszem, ha valami t√∫l sz√©p ahhoz, hogy igaz legyen.",
    "√Åltal√°ban √°tl√°tok a rekl√°mokon.",
]

MANIP_CHECK = [
    "Az √©rt√©kel√©skor figyelmen k√≠v√ºl hagytam az √°rat.",
    "Meg√©rtettem, hogy a tartalmakat MI gener√°lta / √°ll√≠thatta el≈ë.",
]

DEMOGRAPHICS = {
    "Nem": ["N≈ë", "F√©rfi", "Egy√©b", "Nem szeretn√©k v√°laszolni"],
    "√âletkor": ["18-24", "25-34", "35-44", "45-54", "55+"],
    "Legmagasabb iskolai v√©gzetts√©g": [
        "K√∂z√©piskola",
        "F≈ëiskola / Egyetem (BA/BSc)",
        "Mesterk√©pz√©s (MA/MSc)",
        "PhD / DLA",
    ],
}

# ---------- ST√çLUS ----------
st.markdown("""
<style>
html, body, [class*="css"] { font-size: 18px; }
.q-card { padding:20px 22px; margin:14px 0 18px 0; border:1px solid #e6e6e6; border-radius:14px; background:#fafafa; }
.q-title { font-weight:600; font-size:18px; margin-bottom:10px; }
.q-help { color:#666; font-size:16px; margin:-6px 0 6px 0; }
.stButton>button { font-size:18px; padding:10px 22px; border-radius:10px; }
</style>
""", unsafe_allow_html=True)

# ---------- NAV FUNKCI√ì (jav√≠tott) ----------
def nav(prev=None, next=None, submit=False):
    c1, c2 = st.columns([1,1])
    with c1:
        if prev is not None and st.button("‚Üê Vissza", key=f"prev_{st.session_state.page}"):
            st.session_state.page = prev
            st.rerun()
    with c2:
        if submit:
            if st.button("Tov√°bb ‚Üí", key=f"submit_{st.session_state.page}"):
                return "submit"
        else:
            if next is not None and st.button("Tov√°bb ‚Üí", key=f"next_{st.session_state.page}"):
                st.session_state.page = next
                st.rerun()
    return None


# ========== OLDALAK ==========

page = st.session_state.page

page = st.session_state.page

# ========= OLDALAK =========
page = st.session_state.page

# ---- ide j√∂n az √≥ra ----
from datetime import datetime
from streamlit_autorefresh import st_autorefresh

# Friss√≠t√©s 1 m√°sodpercenk√©nt
st_autorefresh(interval=1000, key="clock_refresh")

# Jelenlegi id≈ë
now = datetime.now().strftime("%H:%M:%S")

# Jobb fels≈ë sarokba
col1, col2 = st.columns([9,1])
with col2:
    st.caption(f"üïí {now}")
# -------------------------



from streamlit_autorefresh import st_autorefresh
from datetime import datetime

# friss√≠t√©s 1 m√°sodpercenk√©nt
st_autorefresh(interval=1000, key="time_refresh")

# oldal bel√©p√©s ideje logolva
if f"page_{page}_entered" not in st.session_state.timestamps:
    st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()



# oldal bel√©p√©s ideje logolva
st.session_state.timestamps[f"page_{page}_entered"] = datetime.utcnow().isoformat()



# 0. Beleegyez√©s + instrukci√≥k
if page == 0:
    st.title("üß≠ MI-aj√°nl√°sok ‚Äì k√©rd≈ë√≠v")
    progress_bar(0, TOTAL_PAGES)
    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.markdown("**Beleegyez√©s**")
    consent = st.radio(
        "Hozz√°j√°rulok a n√©vtelen v√°laszaim kutat√°si c√©l√∫ felhaszn√°l√°s√°hoz.",
        ["Igen", "Nem"], index=None, key="consent")
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.markdown("**Instrukci√≥k**")
    st.write("A k√∂vetkez≈ë oldalakon MI √°ltal javasolt utaz√°si aj√°nlatokat l√°t. "
             "K√©rj√ºk, olvassa el / n√©zze meg, majd v√°laszoljon a k√©rd√©sekre.")
    st.write("‚ö†Ô∏è A d√∂nt√©se sor√°n **ne vegye figyelembe az √°rat** ‚Äì ezt k√ºl√∂n is ellen≈ërizz√ºk.")
    st.markdown('</div>', unsafe_allow_html=True)

    if st.button("Kezd√©s ‚ûú"):
        if consent != "Igen":
            st.error("A k√©rd≈ë√≠v folytat√°s√°hoz sz√ºks√©g van a beleegyez√©sre.")
        else:
            st.session_state.page = 1
            st.rerun()

# ===== Aj√°nlat oldalak (1-3) =====
elif page == 1:
    progress_bar(page, TOTAL_PAGES)
    st.header("Aj√°nlat 1/3 ‚Äì Pr√°ga")

    if st.session_state.group == "text":
        st.markdown(TEXT_OFFERS["Pr√°ga"])
    else:
        st.image(IMAGES["Pr√°ga"], caption=CAPTIONS["Pr√°ga"], use_container_width=True)

    nav(prev=0, next=2)



elif page == 2:
    progress_bar(page, TOTAL_PAGES)
    st.header("Aj√°nlat 2/3 ‚Äì Barcelona")

    if st.session_state.group == "text":
        st.markdown(TEXT_OFFERS["Barcelona"])
    else:
        st.image(IMAGES["Barcelona"], caption=CAPTIONS["Barcelona"], use_container_width=True)

    nav(prev=1, next=3)


elif page == 3:
    progress_bar(page, TOTAL_PAGES)
    st.header("Aj√°nlat 3/3 ‚Äì R√≥ma")

    if st.session_state.group == "text":
        st.markdown(TEXT_OFFERS["R√≥ma"])
    else:
        st.image(IMAGES["R√≥ma"], caption=CAPTIONS["R√≥ma"], use_container_width=True)

    nav(prev=2, next=4)


# ===== 4. oldal: D√∂nt√©s =====
elif page == 4:
    progress_bar(page, TOTAL_PAGES)
    st.header("2. D√∂nt√©s")

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    decision_choice = st.radio(
        "Melyik aj√°nlatot fogadn√° el?",
        ["Pr√°ga", "Barcelona", "R√≥ma", "Egyiket sem"],
        index=None,
        key="decision_choice"
    )
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    decision_count = st.radio(
        "√ñsszesen h√°ny aj√°nlatot tartott elfogadhat√≥nak?",
        [0, 1, 2, 3],
        index=None,
        key="decision_count"
    )
    st.markdown('</div>', unsafe_allow_html=True)

    action = nav(prev=3, next=5, submit=True)
    if action == "submit":
        errs = []
        if decision_choice is None:
            errs.append("V√°lassza ki, melyik aj√°nlatot fogadn√° el.")
        if decision_count is None:
            errs.append("Adja meg, h√°ny aj√°nlatot tartott elfogadhat√≥nak.")
        if decision_choice not in (None, "Egyiket sem") and decision_count == 0:
            errs.append("A v√°lasztott aj√°nlatnak szerepelnie kell az elfogadhat√≥k k√∂z√∂tt.")
        if decision_choice == "Egyiket sem" and decision_count != 0:
            errs.append("Ha ‚ÄûEgyiket sem‚Äù-et v√°laszt, az elfogadhat√≥k sz√°ma 0 kell legyen.")

        if len(errs) > 0:
            st.error(" ‚Ä¢ ".join(errs))
        else:
            st.session_state.answers["decision_choice"] = decision_choice
            st.session_state.answers["decision_count"] = decision_count
            st.session_state.page += 1
            st.rerun()

# ===== 5. oldal: Befoly√°sol√≥ t√©nyez≈ëk =====
elif page == 5:
    progress_bar(page, TOTAL_PAGES)
    st.header("Mi befoly√°solta a d√∂nt√©s√©t?")
    st.caption("(1 = egy√°ltal√°n nem, 10 = nagyon er≈ësen)")

    factors = {}
    for i, f in enumerate(DECISION_FACTORS):
        factors[f] = st.slider(
            f,
            min_value=1,
            max_value=10,
            value=5,
            step=1,
            key=f"factor_{i}"
        )

    # itt azonnal elmentj√ºk a factors √©rt√©keit
    st.session_state.answers["factors"] = factors

    progress_bar(page, TOTAL_PAGES)
    st.header("3. D√∂nt√©si √©lm√©ny")
    st.write("Az al√°bbi k√©rd√©sek arra vonatkoznak, hogyan √©lte meg a d√∂nt√©s meghozatal√°t. "
             "K√©rj√ºk, √©rt√©kelje az √°ll√≠t√°sokat 1‚Äì10-es sk√°l√°n (r√°di√≥gombok).")

    experience_qs = [
        "Biztos voltam abban, hogy j√≥ d√∂nt√©st hoztam.",
        "Megk√∂nnyebb√ºl√©st √©reztem a v√°laszt√°s ut√°n.",
        "Nyugodtnak √©reztem magam a d√∂nt√©s k√∂zben.",
        "√ögy √©reztem, hogy a d√∂nt√©s az √©n kezemben van."
    ]

    exp_ans = {}
    for i, q in enumerate(experience_qs):
        exp_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"exp_{i}")
    st.session_state.answers["experience"] = exp_ans

    # csak egyszer h√≠vjuk meg a nav-ot
    nav(prev=4, next=6)

# 6. oldal ‚Äì 4.1 Meger≈ës√≠t√©skeres√©s
elif page == 6:
    progress_bar(page, TOTAL_PAGES)
    st.header("4.1 Meger≈ës√≠t√©skeres√©s")
    st.write("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat 1‚Äì10-es sk√°l√°n (r√°di√≥gombok).")

    confirmation_qs = [
        "V√°s√°rl√°s ut√°n k√©rem m√°sok v√©lem√©ny√©t, hogy j√≥l d√∂nt√∂ttem-e.",
        "Fontos sz√°momra, hogy a k√∂rnyezetem j√≥v√°hagyja a v√°s√°rl√°si d√∂nt√©seimet.",
        "Bizonytalan helyzetben ink√°bb megv√°rom, mit mondanak m√°sok a term√©kr≈ël.",
        "Gyakran hasonl√≠tom √∂ssze a v√°laszt√°somat az ismer≈ëseim d√∂nt√©seivel."
    ]

    confirmation_ans = {}
    for i, q in enumerate(confirmation_qs):
        confirmation_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"conf_{i}")
    st.session_state.answers["confirmation"] = confirmation_ans
    nav(prev=5, next=7)


# 7. MI-bizalom + rekl√°mfelismer√©s (MIND 1‚Äì10)
elif page == 6:
    progress_bar(page, TOTAL_PAGES)
    st.header("MI-bizalom √©s rekl√°mfelismer√©s")

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.subheader("MI-bizalom (1‚Äì10)")
    ai = {}
    for i, q in enumerate(AI_TRUST):
        ai[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"ai_{i}")
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.subheader("Rekl√°mfelismer√©s (1‚Äì10)")
    pk = {}
    for i, q in enumerate(PERSUASION_KNOWLEDGE):
        pk[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"pk_{i}")
    st.markdown('</div>', unsafe_allow_html=True)

    st.session_state.answers["ai_trust"] = ai
    st.session_state.answers["persuasion"] = pk
    nav(prev=6, next=8)

# 8. Manipul√°ci√≥-ellen≈ërz√©s + figyelmi pr√≥ba
elif page == 7:
    progress_bar(page, TOTAL_PAGES)
    st.header("Ellen≈ërz≈ë k√©rd√©sek")

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.subheader("Manipul√°ci√≥-ellen≈ërz√©s (1‚Äì10)")
    mc = {}
    for i, q in enumerate(MANIP_CHECK):
        mc[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"mc_{i}")
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="q-card">', unsafe_allow_html=True)
    st.subheader("Figyelmi pr√≥ba")
    attn = st.radio("V√°lassza a **harmadik** opci√≥t!", ["Els≈ë", "M√°sodik", "Harmadik", "Negyedik"],
                    index=None, key="attention_check")
    st.markdown('</div>', unsafe_allow_html=True)

    st.session_state.answers["manip_check"] = mc
    st.session_state.answers["attention"] = attn
    nav(prev=7, next=9)
# 8. oldal ‚Äì 4.3 Hogyan hatott √ñnre az MI-aj√°nl√°s?
elif page == 8:
    progress_bar(page, TOTAL_PAGES)
    st.header("4.3 Hogyan hatott √ñnre az MI-aj√°nl√°s a d√∂nt√©se sor√°n?")

    ai_influence = st.radio(
        "K√©rj√ºk, v√°lassza ki az √ñnre legink√°bb jellemz≈ë √°ll√≠t√°st:",
        [
            "Egy√°ltal√°n nem vettem figyelembe az aj√°nl√°st",
            "Az aj√°nl√°s egybeesett azzal, amit magamt√≥l is v√°lasztottam volna",
            "Az aj√°nl√°s √∫j szempontot adott, amit figyelembe vettem",
            "Az aj√°nl√°s teljesen megv√°ltoztatta a d√∂nt√©semet"
        ],
        index=None,
        key="ai_influence"
    )

    st.session_state.answers["ai_influence"] = ai_influence
    nav(prev=7, next=9)

# 9. oldal ‚Äì 4.2 Felel≈ëss√©g√©rzet
elif page == 7:
    progress_bar(page, TOTAL_PAGES)
    st.header("4.2 Felel≈ëss√©g√©rzet")
    st.write("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat 1‚Äì10-es sk√°l√°n (r√°di√≥gombok).")

    responsibility_qs = [
        "Ha egy term√©k nem v√°lik be, magamat hib√°ztatom a rossz d√∂nt√©s√©rt.",
        "V√°s√°rl√°skor gyakran ink√°bb m√°sok vagy egy rendszer javaslataira t√°maszkodom, nem a saj√°t meg√©rz√©semre. (ford√≠tott t√©tel)",
        "Az el√©gedetts√©gem vagy csal√≥d√°som a v√°s√°rl√°saimn√°l az √©n d√∂nt√©sem k√∂vetkezm√©nye."
    ]

    responsibility_ans = {}
    for i, q in enumerate(responsibility_qs):
        responsibility_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"resp_{i}")
    st.session_state.answers["responsibility"] = responsibility_ans
    nav(prev=7, next=10)
# 9. oldal ‚Äì 4.4 Alternat√≠v√°k m√©rlegel√©se
elif page == 9:
    progress_bar(page, TOTAL_PAGES)
    st.header("4.4 Alternat√≠v√°k m√©rlegel√©se")
    st.write("K√©rj√ºk, √©rt√©kelje az al√°bbi √°ll√≠t√°sokat 1‚Äì10-es sk√°l√°n (r√°di√≥gombok).")

    maximization_qs = [
        "V√°s√°rl√°s el≈ëtt t√∂bb k√ºl√∂nb√∂z≈ë term√©ket is √∂ssze szoktam hasonl√≠tani.",
        "Fontos sz√°momra, hogy minden lehets√©ges alternat√≠v√°t megvizsg√°ljak.",
        "Sok id≈ët t√∂lt√∂k azzal, hogy m√°s opci√≥kat is m√©rlegeljek.",
        "Gyakran √°tn√©zek t√∂bb weboldalt vagy boltot, miel≈ëtt d√∂nt√∂k.",
        "√Åltal√°ban nem el√©gszem meg az els≈ë javasolt lehet≈ës√©ggel. (ford√≠tott t√©tel)"
    ]

    maximization_ans = {}
    for i, q in enumerate(maximization_qs):
        maximization_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"max_{i}")
    st.session_state.answers["maximization"] = maximization_ans
    nav(prev=8, next=10)
# 10. oldal ‚Äì 4.5 Nyitott k√©rd√©s
elif page == 10:
    progress_bar(page, TOTAL_PAGES)
    st.header("4.5 Nyitott k√©rd√©s")
    st.write("K√©rem, √≠rja le r√∂viden, mi volt az a legfontosabb szempont, ami alapj√°n v√©g√ºl az adott aj√°nlatot v√°lasztotta.")

    choice_reason = st.text_area("V√°lasza:", key="choice_reason")

    st.session_state.answers["choice_reason"] = choice_reason
    nav(prev=9, next=11)
# 11. oldal ‚Äì 5. V√°s√°rl√°si gyakoris√°g
elif page == 11:
    progress_bar(page, TOTAL_PAGES)
    st.header("5. V√°s√°rl√°si gyakoris√°g")
    st.caption("(K√©rem, jel√∂lje, milyen gyakran v√°s√°rol az al√°bbi m√≥dokon.)")

    freq_opts = ["Soha", "Ritk√°n (√©vente 1‚Äì2 alkalom)", "Havonta", "Hetente", "Hetente t√∂bbsz√∂r"]

    freq = {}
    freq["Milyen gyakran v√°s√°rol online (pl. webshopban, alkalmaz√°son kereszt√ºl)?"] = st.radio(
        "Milyen gyakran v√°s√°rol online (pl. webshopban, alkalmaz√°son kereszt√ºl)?",
        freq_opts, index=None, key="freq_online"
    )
    freq["Milyen gyakran v√°s√°rol szem√©lyesen (pl. boltban, √ºzletben)?"] = st.radio(
        "Milyen gyakran v√°s√°rol szem√©lyesen (pl. boltban, √ºzletben)?",
        freq_opts, index=None, key="freq_offline"
    )
    freq["Milyen gyakran haszn√°l mesters√©ges intelligencia eszk√∂zt (pl. chatbotot, aj√°nl√≥rendszert) v√°s√°rl√°sai sor√°n?"] = st.radio(
        "Milyen gyakran haszn√°l mesters√©ges intelligencia eszk√∂zt (pl. chatbotot, aj√°nl√≥rendszert) v√°s√°rl√°sai sor√°n?",
        freq_opts, index=None, key="freq_ai"
    )

    st.session_state.answers["frequency"] = freq
    nav(prev=10, next=12)
# 12. oldal ‚Äì AIAS-4 sk√°la
elif page == 12:
    progress_bar(page, TOTAL_PAGES)
    st.header("6. AIAS-4 sk√°la")
    st.write("(1 = Egy√°ltal√°n nem √©rtek egyet ‚Ä¶ 10 = Teljes m√©rt√©kben egyet√©rtek)")

    aias_qs = [
        "√ögy gondolom, hogy a mesters√©ges intelligencia jav√≠tani fogja az √©letemet.",
        "√ögy gondolom, hogy a mesters√©ges intelligencia jav√≠tani fogja a munk√°mat.",
        "√ögy gondolom, hogy a j√∂v≈ëben haszn√°lni fogok mesters√©ges intelligencia alap√∫ technol√≥gi√°t.",
        "√ögy gondolom, hogy a mesters√©ges intelligencia √∂sszess√©g√©ben pozit√≠v az emberis√©g sz√°m√°ra."
    ]

    aias_ans = {}
    for i, q in enumerate(aias_qs):
        aias_ans[q] = st.radio(q, list(range(1,11)), horizontal=True, key=f"aias_{i}")
    st.session_state.answers["aias"] = aias_ans
    nav(prev=11, next=13)
# 13. oldal ‚Äì Mesters√©ges intelligencia haszn√°lata
elif page == 13:
    progress_bar(page, TOTAL_PAGES)
    st.header("7. Mesters√©ges intelligencia haszn√°lata")

    ai_use = st.radio(
        "7.1. Haszn√°lja √ñn a mindennapokban mesters√©ges intelligencia alap√∫ eszk√∂z√∂ket (pl. ChatGPT, aj√°nl√≥rendszerek, chatbotok)?",
        ["Igen", "Nem"],
        index=None,
        key="ai_use"
    )

    ai_freq = st.radio(
        "7.2. Milyen gyakran haszn√°l mesters√©ges intelligenci√°t?",
        ["Soha", "Ritk√°n", "Havonta", "Hetente", "Hetente t√∂bbsz√∂r"],
        index=None,
        key="ai_freq"
    )

    st.session_state.answers["ai_use"] = ai_use
    st.session_state.answers["ai_freq"] = ai_freq
    nav(prev=12, next=14)


# 14. oldal ‚Äì Demogr√°fiai k√©rd√©sek
elif page == 14:
    progress_bar(page, TOTAL_PAGES)
    st.header("8. Demogr√°fiai k√©rd√©sek")

    demo = {}
    demo["Neme"] = st.radio(
        "8.1 K√©rj√ºk, jel√∂lje a nem√©t:",
        ["F√©rfi", "N≈ë", "Egy√©b / nem szeretn√©m megadni"],
        index=None, key="demo_gender"
    )
    demo["√âletkora"] = st.radio(
        "8.2 K√©rj√ºk, adja meg az √©letkor√°t:",
        ["18‚Äì24 √©v", "25‚Äì34 √©v", "35‚Äì44 √©v", "45‚Äì54 √©v", "55 √©v vagy id≈ësebb"],
        index=None, key="demo_age"
    )
    demo["Legmagasabb iskolai v√©gzetts√©ge"] = st.radio(
        "8.3 K√©rj√ºk, adja meg a legmagasabb iskolai v√©gzetts√©g√©t:",
        ["K√∂z√©piskola", "Fels≈ëfok√∫ tanulm√°nyok folyamatban", "Egyetemi / f≈ëiskolai diploma", "Posztgradu√°lis v√©gzetts√©g"],
        index=None, key="demo_edu"
    )
    demo["Foglalkoz√°sa / st√°tusza"] = st.radio(
        "8.4 K√©rj√ºk, jel√∂lje a foglalkoz√°s√°t / st√°tusz√°t:",
        ["Tanul√≥ / hallgat√≥", "Dolgoz√≥ alkalmazottk√©nt", "V√°llalkoz√≥", "Munkan√©lk√ºli", "Egy√©b"],
        index=None, key="demo_job"
    )
    demo["Lak√≥hely t√≠pusa"] = st.radio(
        "8.5 K√©rj√ºk, jel√∂lje a lak√≥hely√©nek t√≠pus√°t:",
        ["F≈ëv√°ros", "Megyesz√©khely", "Egy√©b v√°ros", "K√∂zs√©g"],
        index=None, key="demo_residence"
    )

    st.session_state.answers["demographics"] = demo
    nav(prev=13, next=15)


# 15. K√∂sz√∂n≈ë + ment√©s
elif page == 15:
    progress_bar(page, TOTAL_PAGES)
    st.success("K√∂sz√∂nj√ºk a kit√∂lt√©st! ‚úÖ")

    record = {
        "rid": st.session_state.rid,
        "entered_at": st.session_state.entered_at,
        "submitted_at": datetime.utcnow().isoformat(),
        "group": st.session_state.group,
        "answers": st.session_state.answers,
        "timestamps": st.session_state.timestamps,  # <= ITT a helye
    }
    save_row(record)
from datetime import datetime

def calc_durations(timestamps: dict):
    durations = {}
    for key, value in timestamps.items():
        if key.endswith("_entered"):
            page = key.replace("_entered", "")
            entered = datetime.fromisoformat(value)
            left_key = f"{page}_left"
            if left_key in timestamps:
                left = datetime.fromisoformat(timestamps[left_key])
                durations[page] = (left - entered).total_seconds()
            else:
                durations[page] = None  # m√©g nem l√©pett ki err≈ël az oldalr√≥l
    return durations



    if st.button("√öjrakezd√©s"):
        st.session_state.clear()
        st.rerun()
# ---------- ST√çLUS FEL√úL√çR√ÅS ----------
st.markdown("""
<style>
.q-card {
    padding:0;
    margin:0;
    border:none;
    border-radius:0;
    background:transparent;
}
</style>
""", unsafe_allow_html=True)
# ---------- CLEAN MODE (extra er≈ës) ----------

HIDE_UI = """
<style>
/* Men√º, footer, header */
#MainMenu {visibility: hidden !important;}
footer {visibility: hidden !important;}
header {visibility: hidden !important;}

/* Deploy, Fork, GitHub, Share, Crown badge */
.stDeployButton, .stAppDeployButton, .stShareButton {display: none !important;}
[data-testid="stDecoration"] {display: none !important;}
[data-testid="stToolbar"] {display: none !important;}
[data-testid="stStatusWidget"] {display: none !important;}
[data-testid="stSidebarCollapseButton"] {display: none !important;}
[data-testid="stHeaderActionButtons"] {display: none !important;}
[data-testid="stActionButton"] {display: none !important;}
button[kind="header"] {display: none !important;}

/* Accessibility / villog√≥ ikonok */
[class*="accessibility"] {display: none !important;}
[class*="stAppFloatingActionButton"] {display: none !important;}
[title="Accessibility"] {display: none !important;}
[title="Open settings"] {display: none !important;}

/* Plusz marg√≥ fix */
.block-container {padding-top: 1rem;}
</style>
"""
import streamlit as st
st.markdown(HIDE_UI, unsafe_allow_html=True)


